from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)
import requests
from collections import defaultdict

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: chat_id ‚Üí {symbol: amount} ---
user_balances: dict[int, dict[str, float]] = defaultdict(lambda: defaultdict(float))

# --- –°–ª–æ–≤–∞—Ä—å ¬´—Å–∏–º–≤–æ–ª ‚Üí CoinGecko ID¬ª ---
SYMBOL_MAP = {
    "btc": "bitcoin",
    "eth": "ethereum",
    "usdt": "tether",
    "bnb": "binancecoin",
    "ada": "cardano",
    "xrp": "ripple",
    "usdc": "usd-coin",
    "doge": "dogecoin",
    "matic": "matic-network",
}

def resolve_coin(symbol: str) -> str:
    return SYMBOL_MAP.get(symbol, symbol)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
ADMIN_CHAT_ID = 7736404289  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id

# --- –¢–æ–∫–µ–Ω –æ—Ç BotFather ---
BOT_TOKEN = "7612093789:AAFmp7EeR9iIEguG3zG6_6ImrzPd5L30c9w"

def get_price(symbol: str) -> float | None:
    coin_id = resolve_coin(symbol.lower())
    url = "https://api.coingecko.com/api/v3/simple/price"
    params = {"ids": coin_id, "vs_currencies": "usd"}
    try:
        resp = requests.get(url, params=params, timeout=10)
        data = resp.json()
        return data.get(coin_id, {}).get("usd")
    except Exception:
        return None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def initial_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üî∞ –ù–∞—á–∞—Ç—å", callback_data="main_menu")]]
    markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", reply_markup=markup)
    else:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", reply_markup=markup)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üè¶ –ö–æ—à–µ–ª—ë–∫", callback_data="wallet_menu"),
         InlineKeyboardButton("üìà –ë–∏—Ä–∂–∞", callback_data="exchange_menu")],
        [InlineKeyboardButton("ü§ù P2P", callback_data="p2p_menu"),
         InlineKeyboardButton("‚öôÔ∏è –ê–∫–∫–∞—É–Ω—Ç", callback_data="account_menu")],
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=InlineKeyboardMarkup(keyboard))

async def wallet_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("–ë–∞–ª–∞–Ω—Å", callback_data="wallet_balance")],
        [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="wallet_deposit")],
        [InlineKeyboardButton("–í—ã–≤–µ—Å—Ç–∏", callback_data="wallet_withdraw")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")],
    ]
    await query.edit_message_text(
        "üè¶ *–ö–æ—à–µ–ª—ë–∫*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def wallet_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id
    balances = user_balances[chat_id]
    if not balances:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤."
    else:
        text = "–í–∞—à –±–∞–ª–∞–Ω—Å:\n" + "\n".join(f"{sym.upper()}: {amt}" for sym, amt in balances.items())
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="wallet_menu")]])
    )

async def wallet_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("–û—Ñ–∏—Å –ú–æ—Å–∫–≤–∞", callback_data="deposit_office_moscow")],
        [InlineKeyboardButton("–û—Ñ–∏—Å –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", callback_data="deposit_office_spb")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="wallet_menu")],
    ]
    await query.edit_message_text(
        "üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ–∏—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def deposit_office_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    office = query.data.split('_')[-1]
    context.user_data['deposit_office'] = office
    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ñ–∏—Å: {office}\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="wallet_menu")]])
    )

async def deposit_amount_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    office = context.user_data.get('deposit_office')
    if not office:
        return
    amount = update.message.text.strip()
    chat_id = update.effective_chat.id
    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:\n"
                  f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chat_id}\n"
                  f"–û—Ñ–∏—Å: {office}\n"
                  f"–°—É–º–º–∞: {amount}"),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º", url=f"tg://user?id={chat_id}")]
            ])
        )
    except Exception:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. "
            "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–∞—Ç—å /start –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º."
        )
    await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ.")
    context.user_data.pop('deposit_office', None)

async def wallet_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üí∏ –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="wallet_menu")]])
    )

async def exchange_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üìà *–ë–∏—Ä–∂–∞*\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rate –∏ /exchange.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
    )

async def p2p_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "ü§ù *P2P*\n–°–ø–∏—Å–æ–∫ P2P-–æ—Ñ—Ñ–µ—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
    )

async def account_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "‚öôÔ∏è *–ê–∫–∫–∞—É–Ω—Ç*\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/rate <coin> ‚Äî —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å\n"
        "/exchange <from> <to> <amount> ‚Äî —Ä–∞—Å—á—ë—Ç –æ–±–º–µ–Ω–∞"
    )

async def rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        return await update.message.reply_text("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –º–æ–Ω–µ—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä /rate btc")
    sym = context.args[0].lower()
    price = get_price(sym)
    if price is None:
        return await update.message.reply_text(f"–ù–µ –Ω–∞—à—ë–ª —Ü–µ–Ω—É –¥–ª—è ¬´{sym}¬ª üòï")
    await update.message.reply_text(f"üí∞ {sym.upper()} = {price} USD")

async def exchange(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 3:
        return await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /exchange <from> <to> <amount>\n"
            "–ü—Ä–∏–º–µ—Ä: /exchange btc usdt 0.5"
        )
    frm, to, amt_str = map(str.lower, context.args)
    try:
        amt = float(amt_str)
    except ValueError:
        return await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä 0.5")
    price_from = get_price(frm)
    price_to = get_price(to)
    if price_from is None or price_to is None:
        return await update.message.reply_text("–û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª—ã –º–æ–Ω–µ—Ç.")
    result = amt * price_from / price_to
    await update.message.reply_text(f"{amt} {frm.upper()} ‚âà {result:.6f} {to.upper()}")


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    # —Å—Ç–∞—Ä—Ç –∏ –Ω–∞—á–∞–ª–æ
    app.add_handler(CommandHandler("start", initial_handler))
    app.add_handler(CallbackQueryHandler(initial_handler, pattern="^start$"))
    app.add_handler(MessageHandler(filters.Regex("^üî∞ –ù–∞—á–∞—Ç—å$"), initial_handler))
    # –º–µ–Ω—é
    app.add_handler(CallbackQueryHandler(main_menu, pattern="^main_menu$"))
    # –∫–æ—à–µ–ª—ë–∫
    app.add_handler(CallbackQueryHandler(wallet_menu, pattern="^wallet_menu$"))
    app.add_handler(CallbackQueryHandler(wallet_balance, pattern="^wallet_balance$"))
    app.add_handler(CallbackQueryHandler(wallet_deposit, pattern="^wallet_deposit$"))
    app.add_handler(CallbackQueryHandler(deposit_office_handler, pattern="^deposit_office_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, deposit_amount_handler))
    app.add_handler(CallbackQueryHandler(wallet_withdraw, pattern="^wallet_withdraw$"))
    # –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª—ã
    app.add_handler(CallbackQueryHandler(exchange_menu, pattern="^exchange_menu$"))
    app.add_handler(CallbackQueryHandler(p2p_menu, pattern="^p2p_menu$"))
    app.add_handler(CallbackQueryHandler(account_menu, pattern="^account_menu$"))
    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("rate", rate))
    app.add_handler(CommandHandler("exchange", exchange))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()
