from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    WebAppInfo
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes
)
import os
import requests
import json
from collections import defaultdict
from typing import Final

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: chat_id ‚Üí –¥–∞–Ω–Ω—ã–µ ---
user_balances: dict[int, dict[str, float]] = defaultdict(
    lambda: defaultdict(float)
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# –ß–∏—Ç–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_CHAT_ID = int(os.environ.get("ADMIN_CHAT_ID", "0"))
BOT_TOKEN: Final[str] = os.environ.get(
    "BOT_TOKEN",
    "7612093789:AAFmp7EeR9iIEguG3zG6_6ImrzPd5L30c9w",
)
WEBAPP_URL = os.environ.get(
    "WEBAPP_URL",
    "https://jumeaux34.github.io/aurora-webapp/index.html",
)  # –∞–¥—Ä–µ—Å WebApp
ALLOWED_OFFICES: Final[set[str]] = {"moscow", "spb"}
MAX_DEPOSIT_AMOUNT: Final[float] = 10000.0



# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ ---
def get_price(symbol: str) -> float | None:
    try:
        r = requests.get(
            "https://api.coingecko.com/api/v3/simple/price",
            params={"ids": symbol.lower(), "vs_currencies": "usd"},
            timeout=5,
        )
        r.raise_for_status()
        data = r.json()
        return data.get(symbol.lower(), {}).get("usd")
    except requests.RequestException:
        return None


# --- /start: –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–µ—Å—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–µ—Ä–µ–∑ WebApp ---
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[InlineKeyboardButton(
        "üöÄ –û—Ç–∫—Ä—ã—Ç—å Aurora App",
        web_app=WebAppInfo(url=WEBAPP_URL)
    )]]
    await update.message.reply_text(
        (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AuroraCryptoBot!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:"
        ),
        reply_markup=InlineKeyboardMarkup(kb),
    )


# --- –ü—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp (JSON) ---
async def webapp_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payload = json.loads(update.message.web_app_data.data)
    action = payload.get("action")
    user_id = update.effective_chat.id

    # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏: action=deposit, office, amount
    if action == "deposit":
        office = payload.get("office")
        amount = payload.get("amount")
        try:
            amount_value = float(amount)
        except (TypeError, ValueError):
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.")
            return
        if amount_value <= 0 or amount_value > MAX_DEPOSIT_AMOUNT:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.")
            return
        if office not in ALLOWED_OFFICES:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ñ–∏—Å.")
            return

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=(
                f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ WebApp:\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                f"–û—Ñ–∏—Å: {office}\n"
                f"–°—É–º–º–∞: {amount_value}"
            ),
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(
                        "‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è",
                        url=f"tg://user?id={user_id}",
                    )
                ]
            ])
        )
        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ WebApp."
        )
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ action: exchange, withdraw –∏ —Ç.–¥.
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ WebApp.")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (—Ä–µ–∑–µ—Ä–≤–Ω–æ) ---
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CommandHandler("help", help_command))
    # WebApp-data
    app.add_handler(
        MessageHandler(
            filters.StatusUpdate.WEB_APP_DATA,
            webapp_handler,
        )
    )

    print("AuroraCryptoBot –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    app.run_polling()


if __name__ == "__main__":
    main()
